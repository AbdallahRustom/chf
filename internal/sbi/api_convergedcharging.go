/*
 * Nchf_ConvergedCharging
 *
 * ConvergedCharging Service    Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 3.0.3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package sbi

import (
	"net/http"
	"strconv"
	"strings"

	"github.com/free5gc/openapi"
	"github.com/free5gc/openapi/models"

	"github.com/gin-gonic/gin"

	"github.com/free5gc/chf/internal/logger"
)

// Index is the index handler.
func Index(c *gin.Context) {
	c.String(http.StatusOK, "Hello World!")
}

func (s *Server) getConvergenChargingEndpoints() []Route {
	return []Route{
		{
			Method:  http.MethodGet,
			Pattern: "/",
			APIFunc: Index,
		},
		{
			Method:  http.MethodPost,
			Pattern: "/chargingdata/:ChargingDataRef/release",
			APIFunc: s.ChargingdataChargingDataRefReleasePost,
		},
		{
			Method:  http.MethodPost,
			Pattern: "/chargingdata/:ChargingDataRef/update",
			APIFunc: s.ChargingdataChargingDataRefUpdatePost,
		},
		{
			Method:  http.MethodPost,
			Pattern: "/chargingdata",
			APIFunc: s.ChargingdataPost,
		},
		{
			Method:  http.MethodGet,
			Pattern: "/recharging",
			APIFunc: s.RechargeGet,
		},
		{
			Method:  http.MethodPut,
			Pattern: "/recharging/:rechargingInfo",
			APIFunc: s.RechargePut,
		},
	}
}

// ChargingdataChargingDataRefReleasePost -
func (s *Server) ChargingdataChargingDataRefReleasePost(c *gin.Context) {
	var chargingDataReq models.ChargingDataRequest

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.ChargingdataPostLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&chargingDataReq, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.ChargingdataPostLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}
	chargingSessionId := c.Param("ChargingDataRef")

	hdlRsp := s.Processor().HandleChargingdataRelease(chargingDataReq, chargingSessionId)
	s.buildAndSendHttpResponse(c, hdlRsp, false)
}

// ChargingdataChargingDataRefUpdatePost
func (s *Server) ChargingdataChargingDataRefUpdatePost(c *gin.Context) {
	var chargingDataReq models.ChargingDataRequest

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.ChargingdataPostLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&chargingDataReq, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.ChargingdataPostLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}
	chargingSessionId := c.Param("ChargingDataRef")

	hdlRsp := s.Processor().HandleChargingdataUpdate(chargingDataReq, chargingSessionId)
	s.buildAndSendHttpResponse(c, hdlRsp, false)
}

// ChargingdataPost
func (s *Server) ChargingdataPost(c *gin.Context) {
	var chargingDataReq models.ChargingDataRequest

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.ChargingdataPostLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&chargingDataReq, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.ChargingdataPostLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	hdlRsp := s.Processor().HandleChargingdataInitial(chargingDataReq)
	s.buildAndSendHttpResponse(c, hdlRsp, false)
}

func (s *Server) RechargeGet(c *gin.Context) {
	c.String(http.StatusOK, "recharge")
}

func (s *Server) RechargePut(c *gin.Context) {
	rechargingInfo := c.Param("rechargingInfo")
	ueIdRatingGroup := strings.Split(rechargingInfo, "_")
	ueId := ueIdRatingGroup[0]
	rgStr := ueIdRatingGroup[1]
	rg, err := strconv.Atoi(rgStr)
	if err != nil {
		logger.RechargingLog.Errorf("UE[%s] fail to recharge for rating group %s", ueId, rgStr)
	}

	logger.RechargingLog.Warnf("UE[%s] Recharg for rating group %d", ueId, rg)

	s.Processor().NotifyRecharge(ueId, int32(rg))

	c.JSON(http.StatusNoContent, gin.H{})
}
